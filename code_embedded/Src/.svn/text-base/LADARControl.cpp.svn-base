/***************************************************************************************************
 * File:         $URL: http://obtuse.cs.jhu.edu/Projects/NASABot/Source/Trunk/Robot/Src/LADARControl.cpp $
 * Author:       $Author: matthew $
 * Revision:     $Revision: 308 $
 * Last Updated: $Date: 2008-02-19 16:29:15 -0500 (Tue, 19 Feb 2008) $
 * 
 * 
 * Copyright (c) 2005-2007, Matthew G Bolitho
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of The Johns Hopkins University nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 ***************************************************************************************************/

#include "Robot.hpp"
#include "LADARControl.hpp"

#include "Memory/Memory.hpp"
using Bolitho::SwapByteOrder;

#include "System/Threading/Thread.hpp"
using Bolitho::System::Thread;

using Bolitho::InvalidOperationException;
using Bolitho::TimeoutException;
using Bolitho::IO::Parity;
using Bolitho::IO::StopBits;

//-----------------------------------------------------------------------------------------------------------------------------------------------------
ImplementRuntimeType(NASA,LADAR,Object);
//-----------------------------------------------------------------------------------------------------------------------------------------------------

#if defined(LADAR_SIMULATION)
#include "Math/Math.hpp"
using Bolitho::Math::UniformRandom;

#include "IO/File.hpp"
using Bolitho::IO::File;
using Bolitho::IO::FileMode;

//-----------------------------------------------------------------------------------------------------------------------------------------------------
LADAR::LADAR()
{
  m_HorizontalAngle = 180;
  m_HorizontalResolution = 50;
  m_SamplesPerScanLine = 361;

  m_TestData.Read(File::Open("Test.RangeImage", FileMode::OPEN));
  m_TestDataRowIndex = 0;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
VOID LADAR::Initialize(LPCTSTR DeviceName, DWORD Baud)
{
  Trace0Enter("\"%s\", %d", DeviceName, Baud);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
SCANNERSTATUS LADAR::GetStatus()
{
  SCANNERSTATUS Status;
  ZeroMemory(&Status, sizeof(Status));

  return Status;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
Buffer<WORD> LADAR::RequestSingleScan()
{
  Trace2Enter("");

  Buffer<WORD> FakeScan(m_SamplesPerScanLine);

  for (SIZE_T i=0; i<FakeScan.Length(); i++)
    FakeScan[i] = (WORD)(m_TestData(m_TestDataRowIndex, i) * 1000); // UniformRandom<FLOAT>() * 400 + 5000);

  m_TestDataRowIndex++;
  if (m_TestDataRowIndex >= m_TestData.Height())
    m_TestDataRowIndex = 0;

  Thread::Sleep(10);

  return FakeScan;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
Buffer<WORD> LADAR::RequestMeanScan(UINT N)
{
  Trace2Enter("%u", N);

  return Buffer<WORD>();
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
BOOL LADAR::SetScanMode(UINT FieldOfView, UINT Resolution)
{
  Trace1Enter("%u, %u", FieldOfView, Resolution);

  if (FieldOfView != 180 && FieldOfView != 100)
    throw LADARException("The field of view is incorrect");
  if (Resolution != 100 && Resolution != 50 && Resolution != 25)
    throw LADARException("The resolution is incorrect");

  m_HorizontalResolution = Resolution;
  m_HorizontalAngle = FieldOfView;
  m_SamplesPerScanLine = (SIZE_T)(FieldOfView * (100.0f / Resolution) + 1);

  return TRUE;

}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
VOID LADAR::Reset()
{
  Trace0Enter("");
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------




BOOL LADAR::RequestBaudRate(DWORD Baud){
	return TRUE;
}
VOID LADAR::MakeBaudRatePermanent(){}

#else
//-----------------------------------------------------------------------------------------------------------------------------------------------------
LADAR::LADAR()
{
  m_HorizontalAngle = 180;
  m_HorizontalResolution = 50;
  m_SamplesPerScanLine = 361;

}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
VOID LADAR::Initialize(LPCTSTR DeviceName, DWORD Baud)
{
  Trace0Enter("\"%s\", %d", DeviceName, Baud);

  #if defined(SPACECUBE)
  m_pLADARPort = File::Open(DeviceName, FileMode::OPEN, FileAccess::READWRITE);
  Reset();
  #else
  m_pLADARPort = SerialPort::Open(DeviceName);
  m_pLADARPort->SetParity(Parity::NONE);
  m_pLADARPort->SetStopBits(StopBits::ONE);
  m_pLADARPort->Purge();
  
  DWORD currentBaud = DetermineBaudRate();
  Trace("Determined baud rate of %d", (INT)currentBaud);
  m_pLADARPort->SetBaudRate(currentBaud);

  m_pLADARPort->Purge();
  // we should probably read the baud rate after reset from the config file
  RequestBaudRate(9600);
  Reset();
  currentBaud = DetermineBaudRate();
  m_pLADARPort->Purge();
  RequestBaudRate(Baud);
  #endif

  Thread::Sleep(1000);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
VOID LADAR::SendTelegram(BYTE Command, CONST Buffer<BYTE>& Data)
{
  SendTelegram(Command, Data.GetBuffer(), Data.Length());
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
VOID LADAR::SendTelegram(BYTE Command, LPCBYTE pData, SIZE_T DataLength)
{
  Buffer<BYTE> Telegram(DataLength + 5);

  /* Start of Text, and Address */
  Telegram[0] = 0x02;
  Telegram[1] = 0x00;

  /* Length of Command BYTE + Data */
  SIZE_T Length = DataLength + 1;
  Telegram[2] = (BYTE)(Length & 0x00ff);
  Telegram[3] = (BYTE)((Length & 0xff00) >> 8);

  /* Command */
  Telegram[4] = Command;

  /* Data */
  CopyMemory(&Telegram[5], pData, DataLength);

  /* Checksum */
  WORD Checksum = ComputeCrc16(&Telegram[0], Telegram.Length());

  #if defined(ARCH_BIGENDIAN)
  SwapByteOrder(&Checksum);
  #endif

  m_pLADARPort->Write(&Telegram[0], Telegram.Length());
  m_pLADARPort->Write(&Checksum, sizeof(WORD));
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
Buffer<BYTE> LADAR::ReadTelegram(BOOL WaitForSTX)
{
  SIZE_T BytesRead = 0;
  Buffer<BYTE> PacketData(4);
  
  BYTE Status = 0;
  if (WaitForSTX)
  {
    while (TRUE)
    {
      if (m_pLADARPort->Read(PacketData.GetBuffer(), 1) == 0)
        throw TimeoutException(this, "A timeout occurred waiting for the command response");
      if (PacketData[0] == 0x02)
        break;
    }

    /* Read Header and Data portion of the packet */
    if (m_pLADARPort->Read(&PacketData[1], 3) < 3)
      throw TimeoutException(this, "The LADAR failed to respond in a timely manner (1)");
  }
  else
  {
    if (m_pLADARPort->Read(&Status, sizeof(BYTE)) == 0)
      throw TimeoutException(this, "A timeout occurred waiting for the command response");

    if (Status != 0x06) /* Is Status ACK? */
      throw LADARException(String::Format("The LADAR Response Status Byte was not ACK: %02x", Status) );

    /* Read Header and Data portion of the packet */
    if (m_pLADARPort->Read(PacketData.GetBuffer(), 4) < 4)
      throw TimeoutException(this, "The LADAR failed to respond in a timely manner (1)");
  }

  WORD Length = *(WORD*)&PacketData[2];
  #if defined(ARCH_BIGENDIAN)
  SwapByteOrder(&Length);
  #endif

  PacketData.Resize(Length + 4);

  SIZE_T Actual = m_pLADARPort->Read(&PacketData[4], Length);

  if (Actual < Length)
    throw TimeoutException(this, "The LADAR failed to respond in a timely manner (2)");

  /* Read and Verify the Checksum */
  WORD Checksum = 0;
  m_pLADARPort->Read(&Checksum, sizeof(WORD));

  #if defined(ARCH_BIGENDIAN)
  SwapByteOrder(&Checksum);
  #endif

  WORD ComputedChecksum = ComputeCrc16(PacketData.GetBuffer(), PacketData.Length());
  
  if (ComputedChecksum != Checksum)
    throw LADARException(String::Format("The LADAR response data packet checksum failed", Status) );

  return PacketData;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
WORD LADAR::ComputeCrc16(LPCBYTE pData, SIZE_T Length)
{
  WORD Crc;
  BYTE Data[2];

  Crc = 0;
  Data[0] = 0;
  while(Length--)
  {
    Data[1] = Data[0];
    Data[0] = *pData++;
    
    if(Crc & 0x8000)
    {
      Crc = (Crc & 0x7fff) << 1;
      Crc ^= 0x8005;
    }
    else
      Crc <<= 1;
    
    Crc ^= ((WORD)Data[0] | (((WORD)Data[1]) << 8));
  }
  return Crc;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
SCANNERSTATUS LADAR::GetStatus()
{
  BYTE StatusRequestMessage[] = { 0x02, 0x00, 0x01, 0x00, 0x31, 0x15, 0x12 };
  m_pLADARPort->Write( StatusRequestMessage, sizeof(StatusRequestMessage) );

  Buffer<BYTE> Response = ReadTelegram();

  TELEGRAMHEADER* pHeader = (TELEGRAMHEADER*)&Response[0];
  SCANNERSTATUS Status = *(SCANNERSTATUS*)&Response[5];

  return Status;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
BOOL LADAR::RequestBaudRate(DWORD Baud)
{
  Trace0Enter("%d", Baud);

  m_pLADARPort->SetTimeout(10000, 10000);

  BYTE Data = 0;
  switch(Baud)
  {
  case 9600:
    Data = 0x42; break;
  case 19200:
    Data = 0x41; break;
  case 38400:
    Data = 0x40; break;
  case 500000:
    Data = 0x48; break;
  };

  SendTelegram(0x20, &Data, sizeof(BYTE));

  Buffer<BYTE> Response = ReadTelegram();

  m_pLADARPort->SetBaudRate(Baud);
  m_pLADARPort->SetTimeout(1000, 1000);

  Trace0Return("%d", Response[0] == 0x02);
  return Response[0] == 0x02;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
VOID LADAR::MakeBaudRatePermanent()
{
  m_pLADARPort->SetTimeout(10000, 10000);

  Trace0Enter("");

  BYTE ConfigMode[] = { 0x02, 0x00, 0x0A, 0x00, 0x20, 0x00, 0x53, 0x49, 0x43, 0x4B, 0x5F, 0x4C, 0x4D, 0x53, 0xBE, 0xC5 };

  m_pLADARPort->Write(ConfigMode, sizeof(ConfigMode));
  Trace("Entering Configuration mode...");

  Buffer<BYTE> ConfigModeResponse = ReadTelegram();
  Trace("Configuration Mode Response:");
  for (SIZE_T i=0; i<ConfigModeResponse.Length(); i++)
    Trace("%d %x", i, ConfigModeResponse[i]);

  BYTE Message[] = { 0x02, 0x00, 0x02, 0x00, 0x66, 0x01, 0x00, 0x00 };

  WORD Checksum = ComputeCrc16(Message, 6);

  Message[6] = LOBYTE(Checksum);
  Message[7] = HIBYTE(Checksum);

  m_pLADARPort->Write(Message, sizeof(Message));

  Trace("Making Baudrate Permanent...");
  Buffer<BYTE> Response = ReadTelegram();
  Trace("Make Baudrate Permanent Response:");
  for (SIZE_T i=0; i<Response.Length(); i++)
    Trace("%d %x", i, Response[i]);

  m_pLADARPort->SetTimeout(1000, 1000);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
Buffer<WORD> LADAR::RequestSingleScan()
{
  Trace2Enter("");

TryAgain:
  try
  {
    BYTE StatusRequestMessage[] = { 0x02, 0x00, 0x02, 0x00, 0x30, 0x01, 0x31, 0x18 };
    m_pLADARPort->Write( StatusRequestMessage, sizeof(StatusRequestMessage) );

    Buffer<BYTE> Data = ReadTelegram();

    #pragma pack(push, 1)
    struct DATAHEADER
    {
      BYTE Stx;
      BYTE Address;
      WORD PacketLength;
      BYTE Response;
      WORD DataLength;
    };
    #pragma pack(pop)

    DATAHEADER* pHeader = (DATAHEADER*)&Data[0];
    WORD* pDataValues = (WORD*)&Data[sizeof(DATAHEADER)];

    #if defined(ARCH_BIGENDIAN)
    SwapByteOrder(&pHeader->PacketLength);
    SwapByteOrder(&pHeader->DataLength);
    #endif

    SIZE_T SampleCount = pHeader->DataLength & 0x1ff;

    #if defined(ARCH_BIGENDIAN)
    for (SIZE_T i=0; i<SampleCount; i++)
      SwapByteOrder(&pDataValues[i]);
    #endif  

    return Buffer<WORD>(pDataValues, SampleCount);
  }
  catch(TimeoutException &)
  {
    TraceError(this, "RequestSingleScan Timeout");
    m_pLADARPort->Purge();
    goto TryAgain;
  }

}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
DWORD LADAR::TestSingleScan()
{
  Trace2Enter("");
  int counter = 0;

  try
  {
    BYTE StatusRequestMessage[] = { 0x02, 0x00, 0x02, 0x00, 0x30, 0x01, 0x31, 0x18 };
    m_pLADARPort->Write( StatusRequestMessage, sizeof(StatusRequestMessage) );
	//Trace("wrote to port");
    Buffer<BYTE> Data = ReadTelegram();

	//Trace("read from port");

    #pragma pack(push, 1)
    struct DATAHEADER
    {
      BYTE Stx;
      BYTE Address;
      WORD PacketLength;
      BYTE Response;
      WORD DataLength;
    };
    #pragma pack(pop)

    DATAHEADER* pHeader = (DATAHEADER*)&Data[0];
    WORD* pDataValues = (WORD*)&Data[sizeof(DATAHEADER)];


    #if defined(ARCH_BIGENDIAN)
    SwapByteOrder(&pHeader->PacketLength);
    SwapByteOrder(&pHeader->DataLength);
    #endif

	//Trace("Formatting data");
    SIZE_T SampleCount = pHeader->DataLength & 0x1ff;

    #if defined(ARCH_BIGENDIAN)
    for (SIZE_T i=0; i<SampleCount; i++)
      SwapByteOrder(&pDataValues[i]);
    #endif  

    return 1;
  }
  catch(TimeoutException &)
  {
    //TraceError(this, "RequestSingleScan Timeout");
    m_pLADARPort->Purge();
    return 0;
  }
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
DWORD LADAR::DetermineBaudRate()
{
	DWORD initialBaud = m_pLADARPort->GetBaudRate();
	DWORD foundBaud;
	DWORD baudRates[4] = { 9600, 19200, 38400, 500000 };

	for(int i=0; i<4; i++){
		foundBaud = baudRates[i];
		m_pLADARPort->SetBaudRate(foundBaud);
		if(TestSingleScan()){
			m_pLADARPort->SetBaudRate(initialBaud);
			return foundBaud;
		}
	}
	// Fell through, return failure condition
	return 0;
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------

Buffer<WORD> LADAR::RequestMeanScan(UINT N)
{
  Trace2Enter("%u", N);

  BYTE StatusRequestMessage[] = { 0x02, 0x00, 0x02, 0x00, 0x30, 0x01, 0x31, 0x18 };
  m_pLADARPort->Write( StatusRequestMessage, sizeof(StatusRequestMessage) );

  Buffer<BYTE> Data = ReadTelegram();

  #pragma pack(push, 1)
  struct DATAHEADER
  {
    BYTE Stx;
    BYTE Address;
    WORD PacketLength;
    BYTE Response;
    WORD DataLength;
  };
  #pragma pack(pop)

  DATAHEADER* pHeader = (DATAHEADER*)&Data[0];
  WORD* pDataValues = (WORD*)&Data[sizeof(DATAHEADER)];

  SIZE_T SampleCount = pHeader->DataLength & 0x1ff;
  return Buffer<WORD>(pDataValues, SampleCount);
}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
BOOL LADAR::SetScanMode(UINT FieldOfView, UINT Resolution)
{
  Trace1Enter("%u, %u", FieldOfView, Resolution);

  if (FieldOfView != 180 && FieldOfView != 100)
    throw LADARException("The field of view is incorrect");
  if (Resolution != 100 && Resolution != 50 && Resolution != 25)
    throw LADARException("The resolution is incorrect");

  BYTE Message[] = { 0x02, 0x00, 0x05, 0x00, 0x3B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

  Message[5] = (BYTE)FieldOfView;
  Message[7] = (BYTE)Resolution;
  
  WORD Checksum = ComputeCrc16(Message, 9);

  Message[9] = LOBYTE(Checksum);
  Message[10] = HIBYTE(Checksum);

  m_pLADARPort->Write(Message, sizeof(Message));

  Buffer<BYTE> Response = ReadTelegram();

  if (Response[5] == 0x1)
  {
    m_HorizontalResolution = Resolution;
    m_HorizontalAngle = FieldOfView;
    m_SamplesPerScanLine = (SIZE_T)(FieldOfView * (100.0f / Resolution) + 1);
  
    return TRUE;
  }
  return FALSE;

}
//-----------------------------------------------------------------------------------------------------------------------------------------------------
VOID LADAR::Reset()
{
  Trace0Enter("");

TryAgain:
  try
  {
    #if !defined(SPACECUBE)
    m_pLADARPort->Purge();
    #endif

    BYTE ResetRequestMessage[] = { 0x02, 0x00, 0x01, 0x00, 0x10, 0x34, 0x12 };
    m_pLADARPort->Write(ResetRequestMessage, sizeof(ResetRequestMessage));
    Trace("Waiting for Reset acknowledgement...");
	// we should probably read the baud rate post reset from the config file...

	ReadTelegram(TRUE);

    #if !defined(SPACECUBE) 
    m_pLADARPort->SetTimeout(15000, 15000);
    #endif

    Trace("Waiting for LADAR to re-initialize...");

    SIZE_T BytesRead = 0;
    Buffer<BYTE> PacketData(4);

    /* Read Header and Data portion of the packet */
    if (m_pLADARPort->Read(PacketData.GetBuffer(), 4) < 4)
      throw TimeoutException(this, "The LADAR did not respond to the reset command (1)");

    WORD Length = *(WORD*)&PacketData[2];

    #if defined(ARCH_BIGENDIAN)
    SwapByteOrder(&Length);
    #endif

    Trace("Packet Length = %hu", Length);

    PacketData.Resize(Length + 4);
    if (m_pLADARPort->Read(&PacketData[4], Length) < Length)
      throw TimeoutException(this, "The LADAR did not respond to the reset command (2)");

    /* Read and Verify the Checksum */
    WORD Checksum = 0;
    m_pLADARPort->Read(&Checksum, sizeof(WORD));

    #if defined(ARCH_BIGENDIAN)
    SwapByteOrder(&Checksum);
    #endif

    Trace("Checksum = %hu", Checksum);

    WORD ComputedChecksum = ComputeCrc16(PacketData.GetBuffer(), PacketData.Length());

    if (ComputedChecksum != Checksum)
      throw LADARException(String::Format("The LADAR response data packet checksum failed") );

    PacketData[PacketData.Length()-2] = 0;
    Trace("Connected to LADAR \"%s\"", &PacketData[5]);

    #if !defined(SPACECUBE)
    m_pLADARPort->SetTimeout(1000, 1000);
    #endif
  }
  catch (TimeoutException&)
  {
    TraceError(this, "Reset Timeout");
    goto TryAgain;
  }
}
#endif

